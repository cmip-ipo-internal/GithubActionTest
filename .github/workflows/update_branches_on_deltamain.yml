name: UPDATE JSON Files from Branches

on:
  push:
    branches:
      - '*'

jobs:
  merge-json-files:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2
  
      - name: Set up Git
        run: |
          git config user.email "actions@wcrp-cmip.org"
          git config user.name "CMIP-IPO GitHub Action"
          git config credential.helper store
          git config --global user.email "actions@wcrp-cmip.org"
          git config --global user.name "CMIP-IPO GitHub Action"
          git config --global push.default current
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo "GH_TOKEN=${GH_TOKEN}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${GH_TOKEN}" >> $GITHUB_ENV
        shell: bash

      - name: Merge JSON files from branches
        run: |
          branches=$(git ls-remote --heads origin | sed 's?.*refs/heads/??' | grep -v 'main$')
          # Merge JSON files from the main branch
          # python merge_json.py main_file.json main_file.json
          
          for branch in $branches; do
            echo "Merging JSON files from branch: $branch"
            git checkout $branch
            
            # Attempt to merge changes from the main branch without creating a merge commit
            # git pull --rebase origin main
            
            # Handle merge conflicts programmatically
            # if [ $? -ne 0 ]; then
              # Resolve conflicts using a merge tool or custom logic
              # For example, using jq to resolve conflicts by merging the JSON files
              
              # jq -s '.[0] * .[1]' main_file.json main_file.json > merged.json
              # mv merged.json main_file.json
              
              git show main:institutions.json > test.del
              
              # Continue the rebase after resolving conflicts
              # git rebase --continue
            # fi
            
            # Commit the changes after resolving conflicts
            git commit -am "Merge JSON files from branch $branch"
            git push origin $branch
          done
          
          # Switch back to the main branch
          git checkout main
